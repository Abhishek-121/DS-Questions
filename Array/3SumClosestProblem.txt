int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int res = nums[0] + nums[1] + nums[2];
        for(int i=0;i<n-2;i++){
            int start = i+1;
            int end = n-1;
            while(start<end){
                int sum = nums[i] + nums[start] +nums[end];
                if(abs(target-sum)<abs(res-target))
                    res = sum;
                if(sum<target){
                    start++;
                }
                else{
                    end--;
                }
            }
        }
        return res;
    }


#Method 2 : Optimized Approach

int threeSumClosest(vector<int>& nums, int target) {
        
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int closest = 0;
        int minDiff = INT_MAX;
        
        for(int i=0;i<n-2;i++){
            int start = i+1;
            int end = n-1;
            while(start<end){
                int sum = nums[i] + nums[start] + nums[end];
                if(sum==target)
                    return sum;
                
                if(sum<target)
                    start++;
                else
                    end--;
                int diff = abs(target-sum);
                if(diff<minDiff){
                    minDiff = diff;
                    closest = sum;
                }
                
            }
        }
        
        return closest;
    }










