
# Inversion Count - O(nlogn) and Space O(n)

long long int _mergeSort(long long int arr[],long long int temp[],long long int left,long long int right);
long long int merge(long long int arr[],long long int temp[],long long int left,long long int mid,long long int right);
 
long long int inversionCount(long long arr[], long long N)
{
    // Your Code Here
    long long int temp[N];
    return _mergeSort(arr,temp,0,N-1);
}

long long int _mergeSort(long long int arr[],long long int temp[],long long int left,long long int right){
  long long int mid ,count=0;
  if(left<right){
      mid = (left + right)/2;
      count += _mergeSort(arr,temp,left,mid);
      count += _mergeSort(arr,temp,mid+1,right);
      count += merge(arr,temp,left,mid+1,right);
  }    
  return count;
}

long long int merge(long long int arr[],long long int temp[],long long int left,long long int mid,long long int right){
    long long int count =0,i,j,k;
    i = left;
    j = mid;
    k = left;
    
    while((i<mid) && (j<=right)){
        if(arr[i]<=arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
            count += mid - i;
        }
    }
    
    while(i<mid){
        temp[k++] = arr[i++];
    }
    while(j<=right){
        temp[k++] = arr[j++];
    }
    for (long long int i = left; i <=right; i++) 
        arr[i] = temp[i];
    return count;
}