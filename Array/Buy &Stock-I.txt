int maxProfit(vector<int>& prices) {
        int max_profit = 0;
        if(prices.size()<=1){
            return max_profit;
        }
        stack<int>s;
        s.push(prices[0]);
        for(int i=1;i<prices.size();i++){
            int profit =0;
            if(prices[i]>s.top()){
                int top = s.top();
                profit = prices[i]-top;
                if(profit>max_profit)
                    max_profit = profit;
            }
            else{
                s.pop();
                s.push(prices[i]);
            }
        }
        return max_profit;
    }



#Method 2 With Better Time Complexity

 int maxProfit(vector<int>& prices) {
        int max_profit = 0;
        int min_price = INT_MAX;
        for(int i=0;i<prices.size();i++){
           if(prices[i]<min_price)
               min_price = prices[i];
           else if(prices[i]-min_price > max_profit)
               max_profit = prices[i]-min_price;
        }
        return max_profit;
    }









