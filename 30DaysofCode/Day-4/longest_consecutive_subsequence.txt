Naive Approach - O(nlogn) 
Space Complexity - O(1)

int longest_consecutive_subsequence(int arr[],int n){
    int ans =0;
    int count =0;
    sort(arr,arr+n);
    set<int>s;
    for(int i=0;i<n;i++){
        if(i>0 && arr[i]==arr[i-1]+1)
            count++;
        else if(arr[i]==arr[i-1])
            continue;
        else
            count =1;
            
        ans = max(count,ans);
    }
    return ans;
}

2. Using Hashing : O(n)
   Space Complexity - O(1)

int longest_consecutive_subsequence(int arr[],int n){
    int ans =0;
    unordered_set<int>s;
    for(int i=0;i<n;i++)
        s.insert(arr[i]);
    for(int i=0;i<n;i++){
        if(s.find(arr[i]-1)==s.end()){
            int j = arr[i];
            while(s.find(j)!=s.end())
                j++;
            ans = max(j-arr[i],ans);
        }
    }
    return ans;
}  












