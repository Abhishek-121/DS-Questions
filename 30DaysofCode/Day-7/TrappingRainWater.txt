# Method 1 - O(n^2)

int Rainwater(int arr[],int n){
    int res =0;
    for(int i=1;i<n-1;i++){
        int left =arr[i];
        for(int j=0;j<i;j++)
            left = max(left,arr[j]);
        
        int right = arr[i];
        for(int j=i+1;j<n;j++)
            right= max(right,arr[j]);
        
        res += min(left,right)-arr[i];
    }
    return res;
}

# Method 2: O(n) and Space-O(n)

int Rainwater(int arr[],int n){
    int res =0;
    int left[n],right[n];
    left[0] = arr[0];
    
    for(int i=1;i<n;i++)
        left[i] = max(left[i-1],arr[i]);
    
    right[n-1] = arr[n-1];
    for(int j=n-2;j>=0;j--)
        right[j] = max(right[j+1],arr[j]);
        
    for(int i=0;i<n;i++)
        res += min(left[i],right[i])-arr[i];
    
    return res;
}

# Method 3 : O(n) and Space : O(1)

int findWater(int arr[], int n) 
{ 
    // initialize output 
    int result = 0; 
  
    // maximum element on left and right 
    int left_max = 0, right_max = 0; 
  
    // indices to traverse the array 
    int lo = 0, hi = n - 1; 
  
    while (lo <= hi) { 
        if (arr[lo] < arr[hi]) { 
            if (arr[lo] > left_max) 
                // update max in left 
                left_max = arr[lo]; 
            else
                // water on curr element = max - curr 
                result += left_max - arr[lo]; 
            lo++; 
        } 
        else { 
            if (arr[hi] > right_max) 
                // update right maximum 
                right_max = arr[hi]; 
            else
                result += right_max - arr[hi]; 
            hi--; 
        } 
    } 
  
    return result; 
} 

