
# Method 1 : Floydâ€™s Cycle detection algorithm.

int detectAndRemoveLoop(struct Node* list) 
{ 
    struct Node *slow_p = list, *fast_p = list; 
  
    // Iterate and find if loop exists or not 
    while (slow_p && fast_p && fast_p->next) { 
        slow_p = slow_p->next; 
        fast_p = fast_p->next->next; 
  
        if (slow_p == fast_p) { 
            removeLoop(slow_p, list); 
  
            return 1; 
        } 
    } 
    return 0; 
} 
  
/* Function to remove loop. 
 loop_node --> Pointer to one of the loop nodes 
 head -->  Pointer to the start node of the linked list */
void removeLoop(struct Node* loop_node, struct Node* head) 
{ 
    struct Node* ptr1 = loop_node; 
    struct Node* ptr2 = loop_node; 
  
    // Count the number of nodes in loop 
    unsigned int k = 1, i; 
    while (ptr1->next != ptr2) { 
        ptr1 = ptr1->next; 
        k++; 
    } 
 
    ptr1 = head; 
  
    // And the other pointer to k nodes after head 
    ptr2 = head; 
    for (i = 0; i < k; i++) 
        ptr2 = ptr2->next; 
  
    /*  Move both pointers at the same pace, 
      they will meet at loop starting node */
    while (ptr2 != ptr1) { 
        ptr1 = ptr1->next; 
        ptr2 = ptr2->next; 
    } 
  
    // Get pointer to the last node 
    while (ptr2->next != ptr1) 
        ptr2 = ptr2->next; 
  
    /* Set the next node of the loop ending node 
      to fix the loop */
    ptr2->next = NULL; 
} 


# Method 2
void removeLoop(Node* head)
{
    Node* slow = head;
    Node* fast = head;
    Node* temp;
        
    while(fast && fast->next){
        temp = slow;
        slow = slow->next;
        fast = fast->next->next;
         if(slow==fast)
          break;
    }
    
    // Now we have to remove the loop
        if(slow==fast){
        slow = head;
        while(slow!=fast){
            slow = slow->next;
            temp = fast;
            fast = fast->next;
        }
        temp->next=NULL;
    }

}